"use server";

import { auth } from "@/lib/auth";
import { prisma } from "@/lib/prisma";
import { revalidatePath } from "next/cache";

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç createPostAction ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö FormData
export async function createPostAction(formData: FormData) {
  const session = await auth();

  if (!session?.user) {
    return { error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ login ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå" };
  }

  const title = formData.get("title") as string;
  const content = formData.get("content") as string;

  if (!title || !content) {
    return { error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" };
  }

  try {
    const post = await prisma.post.create({
      data: {
        title,
        content,
        authorId: session.user.id,
        published: true,
      },
      include: {
        author: {
          select: {
            name: true,
            email: true,
          },
        },
      },
    });

    revalidatePath("/user");
    revalidatePath("/dashboard");

    return {
      success: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      post,
    };
  } catch (error) {
    console.log("üöÄ ~ createPostAction ~ error:", error);
    return { error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå" };
  }
}

// Server action ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö moderator ‡∏´‡∏£‡∏∑‡∏≠ admin
export async function moderatePostAction(
  postId: string,
  action: "approve" | "reject"
) {
  const session = await auth();

  if (!session?.user) {
    return { error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ login" };
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô moderator ‡∏´‡∏£‡∏∑‡∏≠ admin
  if (!["MODERATOR", "ADMIN"].includes(session.user.role)) {
    return { error: "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Moderator ‡∏´‡∏£‡∏∑‡∏≠ Admin" };
  }

  try {
    const post = await prisma.post.update({
      where: { id: postId },
      data: {
        published: action === "approve",
      },
    });

    revalidatePath("/admin");

    return {
      success: `${action === "approve" ? "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥" : "‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò"}‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`,
      post,
    };
  } catch (error) {
    console.log("üöÄ ~ moderatePostAction ~ error:", error);
    return { error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£" };
  }
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏° Server Action ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
export async function createTestPostAction() {
  const session = await auth();

  if (!session?.user) {
    return { error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ login ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå" };
  }

  try {
    const post = await prisma.post.create({
      data: {
        title: `‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö - ${new Date().toLocaleString("th-TH")}`,
        content: `‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ ${
          session.user.name || session.user.email
        } ‡πÄ‡∏°‡∏∑‡πà‡∏≠ ${new Date().toLocaleString("th-TH")}`,
        authorId: session.user.id,
        published: true,
      },
      include: {
        author: {
          select: {
            name: true,
            email: true,
          },
        },
      },
    });

    revalidatePath("/user");
    revalidatePath("/dashboard");
    revalidatePath("/test-protection");

    return {
      success: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      post,
    };
  } catch (error) {
    console.log("üöÄ ~ createTestPostAction ~ error:", error);
    return { error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå" };
  }
}
